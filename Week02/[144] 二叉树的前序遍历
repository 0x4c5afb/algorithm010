144. 二叉树的前序遍历
给定一个二叉树，返回它的 前序 遍历。

题解：

// 迭代
// 算法复杂度
// 时间复杂度：访问每个节点恰好一次，时间复杂度为 O(N) ，其中 N 是节点的个数，也就是树的大小。
// 空间复杂度：取决于树的结构，最坏情况存储整棵树，因此空间复杂度是 O(N)。

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        LinkedList<TreeNode> stack = new LinkedList<>();
        LinkedList<Integer> output = new LinkedList<>();
        if (root == null) {
            return output;
        }
        stack.add(root);
        while(!stack.isEmpty()) {
            TreeNode node = stack.pollLast();
            output.add(node.val);
            if (node.right != null) {
                stack.add(node.right);
            }
            if (node.left != null) {
                stack.add(node.left);
            }
        }
        return output;
    }
}

// 莫里斯遍历
未完待续...
